version: '3.4'
x-redash-service: &redash-service
  image: redash/redash:8.0.0.b32245
  depends_on:
    - postgres
    - redis
  env_file: ./redash/redash.env
  restart: always
services:
#  worker:
#    build: .
#    image: &img worker
#    container_name: 'worker'
#    command: [celery, worker, --app=worker.app, --queues=default, -BE]
#    environment: &env
#      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
#      - CELERY_RESULT_BACKEND=rpc
#      - prometheus_multiproc_dir=/prometheus_multiproc_dir
#    depends_on:
#      - rabbitmq
#    volumes: &volume
#      - ./app:/app
#      - ./data_persistency/prometheus_multiproc:/prometheus_multiproc_dir
#
#  scraping-worker:
#    build: .
#    image: *img
#    container_name: 'scraping-worker'
#    command: [celery, worker, --app=scraping_worker.app, --queues=scraping, -BE]
#    environment: *env
#    depends_on:
#      - rabbitmq
#    volumes: *volume
#
#  embeddings-worker:
#    build: .
#    image: *img
#    container_name: 'embeddings-worker'
#    command: [celery, worker, --app=embeddings_worker.app, --queues=embeddings,
#              -BE]
#    environment: *env
#    depends_on:
#      - rabbitmq
#    volumes: *volume
#
#  database-worker:
#    build: .
#    image: *img
#    container_name: 'database-worker'
#    command: [celery, worker, --app=database_worker.app, --queues=database, -BE]
#    environment: *env
#    depends_on:
#      - rabbitmq
#      - mongodb
#    volumes: *volume
#    links:
#      - mongodb
#
#  rabbitmq:
#    image: rabbitmq:3.8
#    container_name: 'rabbitmq'
#    environment:
#      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log [{console,[{level,warning}]}]
#
#  prometheus:
#    image: prom/prometheus
#    ports:
#      - 9090:9090
#    volumes:
#      - ./app/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#
#  celery-metrics:
#    image: ovalmoney/celery-exporter
#    container_name: 'celery-metrics'
#    ports:
#      - 9540:9540
#    environment:
#      - CELERY_EXPORTER_BROKER_URL=amqp://guest:guest@rabbitmq:5672
#      - CELERY_EXPORTER_LISTEN_ADDRESS=0.0.0.0:9540
#
#  metrics:
#    build: .
#    image: *img
#    container_name: 'metrics'
#    command: [python, metrics.py]
#    environment: *env
#    depends_on:
#      - rabbitmq
#    volumes: *volume
#
#  mongodb:
#    image: mongo
#    container_name: 'mongodb'
#    command: mongod --auth
#    environment:
#      - MONGO_INITDB_DATABASE=reddit
#      - MONGO_INITDB_ROOT_USERNAME=root
#      - MONGO_INITDB_ROOT_PASSWORD=toor
#      - MONGODB_DATA_DIR=/data/db
#      - MONDODB_LOG_DIR=/dev/null
#    volumes:
##      - ./mongo_db/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
#      - ./data_persistency/mongo_db:/data/db
#    ports:
#      - '27017-27019:27017-27019'

#  redash:
#    command:
#      - ./redash/setup.sh

###################################### REDASH ################################
  server:
    <<: *redash-service
    command: server
    ports:
      - "5000:5000"
    environment:
      REDASH_WEB_WORKERS: 4
  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      QUEUES: "celery"
      WORKERS_COUNT: 1
  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "scheduled_queries"
      WORKERS_COUNT: 1
  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2
  redis:
    image: redis:3.0-alpine
    restart: always
  postgres:
    image: postgres:9.6.16-alpine
    env_file: ./redash/redash.env
    volumes:
      - ./data_persistency/redash:/var/lib/postgresql/data
    restart: always
  nginx:
    image: redash/nginx:latest
    ports:
      - "80:80"
    depends_on:
      - server
    links:
      - server:redash
    restart: always

